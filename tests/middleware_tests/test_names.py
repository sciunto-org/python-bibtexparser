from typing import List

import pytest as pytest

from bibtexparser.middlewares.names import split_multiple_persons_names, NameParts, parse_single_name_into_parts, \
    InvalidNameError


@pytest.mark.parametrize("field_value, expected", [
    ("Simple Name", ["Simple Name"]),
    ("First Name and Last Name", ["First Name", "Last Name"]),
    ("First Name AND Last Name", ["First Name", "Last Name"]),
    ("First Name And Last Name", ["First Name", "Last Name"]),
    ("First Name aNd Last Name", ["First Name", "Last Name"]),
    ("First Name    and Last Name", ["First Name", "Last Name"]),
    ("First Name and   Last Name", ["First Name", "Last Name"]),
    ("First Name    and    Last Name", ["First Name", "Last Name"]),
    ("{Simon and Schuster}", ["{Simon and Schuster}"]),
    ("Something \\and Other", ["Something \\and Other"]),
    ("Name One and Two, Name and Name Three", ["Name One", "Two, Name", "Name Three"]),
    ("P. M. Sutherland and Smith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland and\tSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland and\nSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland AND\tSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland AND\nSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland And\tSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland And\nSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland aNd\tSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("P. M. Sutherland aNd\nSmith, J.", ["P. M. Sutherland", "Smith, J."]),
    ("Fake Name an{d brace in an}d and Somebody Else", ["Fake Name an{d brace in an}d", "Somebody Else"]),
    ("and John Smith", ["and John Smith"]),
    (" and John Smith", ["and John Smith"]),
    ("and John Smith and Phil Holden", ["and John Smith", "Phil Holden"]),
    (" and John Smith and Phil Holden", ["and John Smith", "Phil Holden"]),
    ("\tand John Smith and Phil Holden", ["and John Smith", "Phil Holden"]),
    ("\nand John Smith and Phil Holden", ["and John Smith", "Phil Holden"]),
    ("John Smith and Phil Holden and", ["John Smith", "Phil Holden and"]),
    ("John Smith and Phil Holden and ", ["John Smith", "Phil Holden and"]),
    ("John Smith and Phil Holden and\n", ["John Smith", "Phil Holden and"]),
    ("John Smith and Phil Holden and\t", ["John Smith", "Phil Holden and"]),
    ("Harry Fellowes and D. Drumpf", ["Harry Fellowes", "D. Drumpf"]),
    ("Harry Fellowes~and D. Drumpf", ["Harry Fellowes~and D. Drumpf"]),
    ("Harry Fellowes~and~D. Drumpf", ["Harry Fellowes~and~D. Drumpf"]),
    ("Harry Fellowes and~D. Drumpf", ["Harry Fellowes and~D. Drumpf"]),
    ("      ", []),
    ("\t\n \t", []),
    ("~", ["~"]),
    ("~~~ and J. Smith", ["~~~", "J. Smith"]),
])
def test_split_coauthors_consistent_with_bibtex(field_value: str, expected: List[str]):
    """Tests the utility function which splits a string of coauthors into a list of names.

    The test cases are taken from https://github.com/sciunto-org/python-bibtexparser/pull/140/files
    and were generated by the bibtex-calling script in the same PR."""
    assert split_multiple_persons_names(field_value) == expected


@pytest.mark.parametrize("name", [
    pytest.param("", id="empty string"),
    pytest.param(" ", id="single space"),
    pytest.param("  ", id="multiple spaces"),
    pytest.param("  \t~~", id="diverse whitespace characters")
])
def test_name_splitting_whitespace_inputs(name: str):
    """Test that the name splitter can handle whitespace inputs.

    Based on https://github.com/bcbnz/python-bibtexparser/blob/utils/bibtexparser/tests/test_parsename.py#L11
    """
    assert parse_single_name_into_parts(name) == NameParts()


@pytest.mark.parametrize("name, reason", [
    ("BB,", "Trailing comma at end of name"),
    ("BB, ", "Trailing comma at end of name"),
    ("BB, ~\t", "Trailing comma at end of name"),
    (", ~\t", "Trailing comma at end of name"),
    ("AA, BB, CC, DD", "Too many commas"),
    ("AA {BB CC", "Unterminated opening brace"),
    ("AA {{{BB CC", "Unterminated opening brace"),
    ("AA {{{BB} CC}", "Unterminated opening brace"),
    ("AA BB CC}", "Unmatched closing brace"),
    ("AA BB CC}}}", "Unmatched closing brace"),
    ("{AA {BB CC}}}", "Unmatched closing brace"),
])
def test_strict_mode(name: str, reason: str):
    """Test that name splitting raises correct exceptions in strict mode.

    Based on https://github.com/bcbnz/python-bibtexparser/blob/utils/bibtexparser/tests/test_parsename.py#L25
    """
    # message must contain the name and the reason
    with pytest.raises(InvalidNameError, match=f".*{name}.*{reason}.*"):
        parse_single_name_into_parts(name, strict=True)



# TODO continue adapting tests from https://github.com/bcbnz/python-bibtexparser/blob/utils/bibtexparser/tests/test_parsename.py#L49